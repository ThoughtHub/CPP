【项目-分数类的雏形】
　　C++中提供了多种基本的数据类型。实际上，这些远不能满足我们的需求，如复数，再如分数。我们可以自定义类支持这些数据类型。
　　本任务将设计一个简单的分数类，完成对分数的几个运算。一则巩固基于对象编程的方法，二则也为运算符重载等积累些感性认识。
　　分数类的声明为：
[cpp] view plain copy print?在CODE上查看代码片派生到我的代码片
class CFraction  
{  
private:  
    int nume;  // 分子  
    int deno;  // 分母  
public:  
    CFraction(int nu=0,int de=1);   //构造函数，初始化用  
    void set(int nu=0,int de=1);    //置值，改变值时用  
    void input();               //按照"nu/de"的格式，如"5/2"的形式输入  
    void simplify();            //化简（使分子分母没有公因子）  
    void amplify(int n);        //放大n倍，如2/3放大5倍为10/3  
    void output(int style=0);   //输出：以8/6为例，style为0时，原样输出8/6；  
                            //style为1时，输出化简后形式4/3；  
                            //style为2时，输出1(1/3)形式，表示一又三分之一；  
                            //style为3时，用小数形式输出，如1.3333；  
                            //默认方式0  
};  

项目要求：完成分数类的设计，并在main()函数中自行定义对象，调用各成员函数，完成基本的测试。
实践策略：
（1）不建议一次实现所有成员函数后再调试，而是实现一个，测试一个；
（2）本项目的实现及测试顺序可以是：先构造函数和输出output函数（可以先只实现一种输出方式），再set函数，再input函数，等等。

[参考解答]
按照测试策略，可以只实现类中的和输出函数output（output可以暂时只实现0方式），然后编写main函数对它们进行测试，而不是一下子将完整的程序写出来，再测试。
下面是“最初始”的解答：
[cpp] view plain copy print?在CODE上查看代码片派生到我的代码片
#include<iostream>  
#include<Cmath>  
#include<cstdlib>  
using namespace std;  
class CFraction  
{  
private:  
    int nume;  // 分子  
    int deno;  // 分母  
public:  
    CFraction(int nu=0,int de=1);   //构造函数，初始化用  
    void output(int style=0);  
};  
   
CFraction::CFraction(int nu,int de) //构造函数，初始化用  
{  
    if (de!=0)  
    {  
        nume=nu;  
        deno=de;  
    }  
    else  
    {  
        cerr<<"初始化中发生错误，程序退出\n";  
        exit(0);  
    }  
}  
   
//输出分数：以8/6为例  
//style为0时，原样输出8/6；  
//style为1时，输出化简后形式4/3；  
//style为2时，输出1(1/3)形式，表示一又三分之一；  
//style为3时，用小数形式输出，如1.3333；  
void CFraction::output(int style)  
{  
    switch(style)  
    {  
    case 0:  
        cout<<"原样:" <<nume<<'/'<<deno<<endl;  
        break;  
    case 1:  
        break;//其他情况再考虑  
    }  
}  
   
int main()  
{  
    CFraction c1,c2(8,6),c3(3);  
    c1.output(0);  
    c2.output(0);  
    c3.output(0);  
    return 0;  
}  
提供我写出的最终参考解答。一点一点加，随即进行测试。我给出类的完整设计，并没有给出对main函数的完全测试，这个测试，可以在逐步实现中完成。
[cpp] view plain copy print?在CODE上查看代码片派生到我的代码片
#include<iostream>  
#include<Cmath>  
#include<cstdlib>  
using namespace std;  
int gcd(int m, int n);  
class CFraction  
{  
private:  
    int nume;  // 分子  
    int deno;  // 分母  
public:  
    CFraction(int nu=0,int de=1);   //构造函数，初始化用  
    void set(int nu=0,int de=1);    //置值，改变值时用  
    void input();               //按照"nu/de"的格式，如"5/2"的形式输入  
    void simplify();            //化简（使分子分母没有公因子）  
    void amplify(int n);            //放大n倍，如2/3放大5倍为10/3  
    void output(int style=0);  
};  
  
CFraction::CFraction(int nu,int de) //构造函数，初始化用  
{  
    if (de!=0)  
    {  
        nume=nu;  
        deno=de;  
    }  
    else  
    {  
        cerr<<"初始化中发生错误，程序退出\n";  
        exit(0);  
    }  
}  
  
void CFraction::set(int nu,int de)    //置值，改变值时用  
{  
    if (de!=0) //如果不合适，改变值操作无效  
    {  
        nume=nu;  
        deno=de;  
    }  
}  
  
void CFraction::input() //按照"nu/de"的格式，如"5/2"的形式输入  
{  
    int nu,de;  
    char c;  
    while(1)  
    {  
        cout<<"输入分数(m/n): ";  
        cin>>nu>>c>>de;  
        if(c!='/')  
            cout<<"输入格式错误！\n ";  
        else if (de==0)  
            cout<<"分母不能为零！\n ";  
        else  
            break;  
    }  
    nume=nu;  
    deno=de;  
}  
  
// 分数化简，使分子分母没有公因子  
void CFraction::simplify()  
{  
    int n=gcd(deno, nume);  
    deno/=n;     // 化简  
    nume/=n;  
}  
  
// 求m，n的最大公约数  
int gcd(int m, int n) //这个函数可以定义为类的成员函数，也可以为一般函数  
{  
    int r;  
    if (m==0)  
    {  
        return n;  
    }  
    while(r=m%n)  // 求m，n的最大公约数  
    {  
        m=n;  
        n=r;  
    }  
    return n;  
}  
  
void CFraction::amplify(int n)  //放大n倍，如2/3放大5倍为10/3  
{  
    nume*=n;  
}  
//输出分数：以/6为例  
//style为0时，原样输出8/6；  
//style为1时，输出化简后形式4/3；  
//style为2时，输出1(1/3)形式，表示一又三分之一；  
//style为3时，用小数形式输出，如1.3333；  
void CFraction::output(int style)  
{  
    int n=gcd(nume,deno);  
    switch(style)  
    {  
    case 0:  
        cout<<"原样:" <<nume<<'/'<<deno<<endl;  
        break;  
    case 1:  
        cout<<"化简形式: "<<nume/n<<'/'<<deno/n<<endl;     //输出化简形式，并不是要化简  
        break;  
    case 2:  
        cout<<"带分数形式:" <<nume/deno<<'('<<(nume/n)%(deno/n)<<'/'<<deno/n<<')'<<endl;  
        break;  
    case 3:  
        cout<<"近似值:" <<nume/double(deno)<<endl;  
        break;  
    default:  
        cout<<"默认原样:" <<nume<<'/'<<deno<<endl;  
    }  
}  
  
  
int main()  
{  
    CFraction c1,c2(8,6);  
  
    cout<<"关于c1: "<<endl;  
    c1.output(0);  
  
    cout<<"改变c1: "<<endl;   //测试set函数  
    c1.set(2,7);  
    c1.output();  
  
    cout<<"输入c1: "<<endl;//测试input函数  
    c1.input();  
    c1.output(0);  
  
    cout<<"关于c2: "<<endl;//测试output函数  
    c2.output(0);  
    c2.output(1);  
    c2.output(2);  
    c2.output(3);  
    c2.output();  
  
    cout<<"将c2化简: "<<endl;//测试simplify函数  
    c2.simplify();  
    c2.output(0);  
  
    cout<<"将c2放大倍: "<<endl;//测试amplify函数  
    c2.amplify(5);  
    c2.output(0);  
    c2.output(1);  
  
    return 0;  
}  